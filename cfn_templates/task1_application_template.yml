AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys an EC2 instance into the private subnets of the VPC.
  The instance can't be directly connected to a target group using CFN.

Parameters:
  ProjectPrefix:
    Type: String
    Description: The name of the CloudFormation stack that created the VPC (e.g., MyCustomVPC).
  LoadBalancerStackName:
    Type: String
    Description: The name of the CloudFormation stack that created the Load Balancer (e.g., MyWebApp-ALB).
  InstanceType:
    Type: String
    Default: t3.micro
    Description: The EC2 instance type for the application servers.

Resources:
  #IAM role for EC2 instance
  AppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/stepan-S3LogAccess'
        - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/stepan-SNSTopicForEC2'

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AppInstanceRole
  
  # 2. Security Group for the Application Instances
  # Allows inbound traffic ONLY from the Load Balancer on port 80.
  AppInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the application instances
      VpcId: !ImportValue
        Fn::Sub: '${ProjectPrefix}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: '${LoadBalancerStackName}-ALBSG-ID'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-AppSG'

  # 3. EC2 Instance in Private Subnet
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectPrefix}-LaunchTemplate'
      LaunchTemplateData:
        ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt AppInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref AppInstanceSecurityGroup
        UserData:
          # This is the bootstrapping script, Base64 encoded.
          !Base64 |
          #!/bin/bash
          REPO_URL="https://github.com/StepanZdebskyi/devops_task1.git"
          REPO_BRANCH="main"
          #Scripts list to run
          SCRIPTS_TO_RUN=(
            "nginx_setup.sh"
            "logs_scheduler.sh"
            "cloudwatch_setup.sh"
            "auto_updates.sh"
            "sns_ondown.sh"
          )
          #Where to clone the repo
          CLONE_DIR="/opt/devops_task1"
          #Log file for bootstrapper
          LOG_FILE="/var/log/bootstrapping.log"
          #Redirect stdout and stderr to log file
          exec > >(tee -a "$LOG_FILE" | logger -t bootstrapping -s 2>/dev/console) 2>&1
          echo "---Starting EC2 instance bootstrapping process---"
          #Installing the dependencies
          echo "Updating system packages and installing git..."
          if command -v dnf &> /dev/null; then
            sudo dnf update -y
            sudo dnf install -y git
          elif command -v yum &> /dev/null; then
            sudo yum update -y
            sudo yum install -y git
          else
            echo "Neither dnf nor yum package manager found. Exiting."
            exit 1
          fi
          #Clone the repository
          echo "Cloning repository $REPO_URL (branch: $REPO_BRANCH) into $CLONE_DIR"
          if [ -d "$CLONE_DIR" ]; then
            echo "Directory $CLONE_DIR already exists. Pulling latest changes..."
            git -C "$CLONE_DIR" pull origin "$REPO_BRANCH"
          else
            git clone -b "$REPO_BRANCH" "$REPO_URL" "$CLONE_DIR"
          fi
          #Execute the scripts in order
          for script in "${SCRIPTS_TO_RUN[@]}"; do
            SCRIPT_PATH="$CLONE_DIR/scripts/$script"
            echo "---"
            echo "Looking for script $SCRIPT_PATH"

              if [ -f "$SCRIPT_PATH" ]; then
                  echo "Making script $script executable and running it..."
                  chmod 700 "$SCRIPT_PATH"
                  "$SCRIPT_PATH"
                  echo "Script $script executed successfully."
              else
                  echo "Script $script not found in the repository. Exiting."
                  exit 1
              fi
          done
          echo "---"
          echo "Bootstrapping process completed successfully at $(date)."

  # 4. Auto Scaling Group
  # It also handles registering the instance with the Target Group.
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Select
          - 0 #selects the first private subnet - PrivateSubnetA
          - !Split
            - ","
            - !ImportValue
                Fn::Sub: '${ProjectPrefix}-PrivateSubnetIds'
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      TargetGroupARNs:
        # Attaching the instance to the Target Group.
        - !ImportValue
            Fn::Sub: '${LoadBalancerStackName}-TargetGroupARN'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-AppInstance'
          PropagateAtLaunch: true

Outputs:
  InstanceId:
    Description: The ID of the created EC2 Instance.
    Value: !Ref AppLaunchTemplate